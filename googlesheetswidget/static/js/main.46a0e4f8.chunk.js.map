{"version":3,"sources":["components/auth.js","components/autocomplete.js","components/options.js","App.js","serviceWorker.js","index.js"],"names":["Auth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleAuthClick","bind","assertThisInitialized","event","_this2","console","log","window","gapi","auth2","getAuthInstance","signIn","then","err","res","isSignedIn","get","authDone","_this3","react_default","a","createElement","className","Button","id","onClick","Component","AutocompletePage","multiple","getOptions","i","options","length","push","columnIndex","lib","labelKey","placeholder","Options","input","failedLogin","handleKeyDown","handleSubmit","fetchGoogleSheets","setState","target","value","key","that","spreadsheetUrl","googleSheetTable","client","sheets","spreadsheets","values","spreadsheetId","range","response","result","autocomplete","App","selectedEmail","employees","status","initClient","loadGapiAndAfterwardsInitAuth","getJotFormParams","script","document","src","async","defer","onload","head","appendChild","JFCustomWidget","subscribe","googleSheetId","getWidgetSetting","DISCOVERY_DOCS","load","init","apiKey","clientId","discoveryDocs","scope","signedIn","catch","error","page","auth","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46a0e4f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass Auth extends Component {\n\nconstructor(props) {\n    super(props);\n    this.state = {};\n    this.handleAuthClick = this.handleAuthClick.bind(this);\n  }\n\n  handleAuthClick(event) {\n    console.log(\"handle auth click\");\n    window.gapi.auth2.getAuthInstance().signIn().then((err,res)=> {\n      if (window.gapi.auth2.getAuthInstance().isSignedIn.get()){\n        this.props.authDone();\n      }\n    });\n\n  }\n\n\n\n\n\nrender() {\n    return (\n        \n    <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col align-self-center\">\n            <div className=\"buttons\">\n                <Button id=\"button\" onClick={() => this.handleAuthClick(this)}>Authorise</Button>\n            </div>\n          </div>\n        </div>    \n    </div>\n    );\n}\n\n}\nexport default Auth;","\nimport React, { Component } from 'react';\nimport {Typeahead} from 'react-bootstrap-typeahead';\n\n\n\nclass AutocompletePage extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {multiple:false};\n    this.getOptions = this.getOptions.bind(this);\n  }\n\n  getOptions(){\n    console.log(\"get opts\");\n    var res = [];\n    for(var i =0;i<this.props.options.length;i++){\n      if (this.props.options[i][0] ){\n        res.push(this.props.options[i][this.props.columnIndex]);\n      }\n    }\n    console.log(res);\n    return res;\n  }\n\n  render() {\n    const {multiple} = false;\n    return (\n        <Typeahead\n          labelKey=\"name\"\n          multiple={multiple}\n          options={this.getOptions()}\n          placeholder=\"Look up by name\"\n        />);\n  }\n}\n\n\nexport default AutocompletePage;\n\n\n\n","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport AutocompletePage from './autocomplete';\n\nclass Options extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { input: \"\", failedLogin: false,options:[] };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchGoogleSheets = this.fetchGoogleSheets.bind(this);\n  }\n\n  componentDidMount(){\n    this.fetchGoogleSheets(this);\n  }\n \n\n  handleChange(event) {\n    this.setState({ input: event.target.value });\n  }\n\n  handleKeyDown(event) {\n    if (event.key === 'Enter') {\n      this.handleSubmit(this);\n    }\n  }\n\n  handleSubmit(){\n    console.log(this.state.options);\n  }\n\n\n\n\n  fetchGoogleSheets(that){\n    console.log(\"In fetch google sheets\");\n    console.log(that.props.spreadsheetUrl);\n    console.log(that.props.googleSheetTable);\n    if (that.props.spreadsheetUrl && that.props.googleSheetTable){\n      window.gapi.client.sheets.spreadsheets.values.get({\n        spreadsheetId: that.props.spreadsheetUrl,\n        'range': that.props.googleSheetTable,\n      }).then(function(response){\n        that.setState({options:response.result.values});\n        console.log(that.state.options);\n      })\n    } \n  }\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-2\">Search:</div>\n          <div className=\"col-sm-10\">\n            <AutocompletePage options={this.state.options} columnIndex={this.props.columnIndex}> </AutocompletePage>\n          </div>\n        </div>\n \n      </div>\n\n    );\n  }\n\n}\nexport default Options;","import React, { Component } from 'react';\nimport './App.css';\nimport Auth from './components/auth';\nimport Options from './components/options';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEmail: null,\n      employees:[],\n      status:'auth',\n      spreadsheetUrl:'',\n      googleSheetTable:'',\n      columnIndex:null\n    }\n  \n    this.authDone = this.authDone.bind(this);\n    this.initClient = this.initClient.bind(this);\n    this.loadGapiAndAfterwardsInitAuth = this.loadGapiAndAfterwardsInitAuth.bind(this);\n    this.getJotFormParams = this.getJotFormParams.bind(this);\n  }\n\n  loadGapiAndAfterwardsInitAuth() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    script.async = true;\n    script.defer = true;\n    script.onload=()=>{this.initClient(this)};\n    document.head.appendChild(script);\n}\n  componentDidMount(){\n    this.loadGapiAndAfterwardsInitAuth();\n    window.JFCustomWidget.subscribe(\"ready\", ()=> {\n      this.getJotFormParams(this);\n    })\n  }\n\n  getJotFormParams(that){\n    const googleSheetId = window.JFCustomWidget.getWidgetSetting('googleSheetId');\n    const googleSheetTable = window.JFCustomWidget.getWidgetSetting('googleSheetTableName');\n    const columnIndex = window.JFCustomWidget.getWidgetSetting('columnIndex');\n    that.setState({spreadsheetUrl:googleSheetId, googleSheetTable:googleSheetTable, columnIndex:columnIndex});\n  }\n\n  authDone(){\n    this.setState({status:'search'});\n    console.log('auth done!!');\n  }\n\n\n\n  initClient(that) {\n    var CLIENT_ID = '359652543273-isuh9t7hco6p8f1pav3kau3misrim8tv.apps.googleusercontent.com';\n    var API_KEY = 'AIzaSyDjHBwz8TITrxzmbOhLgx0m0MW1RyXkAPw';\n    var DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n    var SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n    window.gapi.load('client', function(){\n    window.gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    }).then((res)=>{\n      var signedIn= window.gapi.auth2.getAuthInstance().isSignedIn.get();\n      that.setState({status:signedIn?'search':'auth'});\n      console.log(signedIn);\n    }).catch((error) =>{\n      console.log(error);\n      });\n    });\n  }\n\n\n\n  render() {\n    var page;\n    if (this.state.status === 'auth' ){\n      page = <Auth authDone={this.authDone}> </Auth>;\n    } else if (this.state.status === 'search'){\n      page = <Options spreadsheetUrl={this.state.spreadsheetUrl} googleSheetTable={this.state.googleSheetTable} columnIndex={this.state.columnIndex}></Options>\n    }\n\n    return (\n      <div className=\"App\">\n        {page}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}